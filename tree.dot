digraph G {
node0 [label="Program"];
node0 -> node1;
node1 [label="StatementList"];
node1 -> node2;
node2 [label="FunctionDefinition"];
node2-> node3;
node3 [label="Name: decimal_to_binary"];
node2 -> node4;
node4 [label="Parameter"];
node4 -> node5;
node5 [label="Name: decimal"];
node5 -> node6;
node6 [label="Type: Int"];
node2-> node8;
node8 [label="ReturnType: String"];
node2 -> node9;
node9 [label="StatementList"];
node9 -> node10;
node10 [label="Declaration"];
node10 -> node11;
node11 [label="Variable: binary"];
node10-> node13
node13[label="="];
node10 -> node14;
node14 [label="Constant: \"\""];
node9 -> node15;
node15 [label="WhileLoop"];
node15 -> node16;
node16 [label="BinaryExpression"];
node16 -> node17;
node17 [label="Variable: decimal"];
node16 -> node18;
node18 [label=">"];
node16 -> node19;
node19 [label="Constant: 0"];
node15 -> node20;
node20 [label="StatementList"];
node20 -> node21;
node21 [label="Declaration"];
node21 -> node22;
node22 [label="Variable: remainder"];
node21-> node24
node24[label="="];
node21 -> node25;
node25 [label="BinaryExpression"];
node25 -> node26;
node26 [label="Variable: decimal"];
node25 -> node27;
node27 [label="-"];
node25 -> node28;
node28 [label="BinaryExpression"];
node28 -> node29;
node29 [label="UnaryExpression"];
node29 -> node30;
node30 [label="("];
node29 -> node31;
node31 [label="BinaryExpression"];
node31 -> node32;
node32 [label="Variable: decimal"];
node31 -> node33;
node33 [label="/"];
node31 -> node34;
node34 [label="Constant: 2"];
node29 -> node35;
node35 [label=")"];
node28 -> node36;
node36 [label="*"];
node28 -> node37;
node37 [label="Constant: 2"];
node20 -> node38;
node38 [label="BinaryExpression"];
node38 -> node39;
node39 [label="Variable: binary"];
node38 -> node40;
node40 [label="="];
node38 -> node41;
node41 [label="BinaryExpression"];
node41 -> node42;
node42 [label="FunctionCall: convert_string"];
node42 -> node43;
node43 [label="Variable: remainder"];
node41 -> node44;
node44 [label="+"];
node41 -> node45;
node45 [label="Variable: binary"];
node20 -> node46;
node46 [label="BinaryExpression"];
node46 -> node47;
node47 [label="Variable: decimal"];
node46 -> node48;
node48 [label="="];
node46 -> node49;
node49 [label="BinaryExpression"];
node49 -> node50;
node50 [label="Variable: decimal"];
node49 -> node51;
node51 [label="/"];
node49 -> node52;
node52 [label="Constant: 2"];
node9 -> node53;
node53 [label="IfStatement"];
node53 -> node54;
node54 [label="BinaryExpression"];
node54 -> node55;
node55 [label="FunctionCall: length"];
node55 -> node56;
node56 [label="Variable: binary"];
node54 -> node57;
node57 [label="=="];
node54 -> node58;
node58 [label="Constant: 0"];
node53 -> node59;
node59 [label="StatementList"];
node59 -> node60;
node60 [label="BinaryExpression"];
node60 -> node61;
node61 [label="Variable: binary"];
node60 -> node62;
node62 [label="="];
node60 -> node63;
node63 [label="Constant: \"0\""];
node9 -> node64;
node64 [label="ReturnStatement"];
node64 -> node65;
node65 [label="Variable: binary"];
node1 -> node66;
node66 [label="FunctionCall: print"];
node66 -> node67;
node67 [label="Constant: \"Enter a decimal number to convert to binary:\\n\""];
node1 -> node68;
node68 [label="Declaration"];
node68 -> node69;
node69 [label="Variable: decimal_number"];
node68-> node71
node71[label="="];
node68 -> node72;
node72 [label="FunctionCall: convert_int"];
node72 -> node73;
node73 [label="FunctionCall: readline"];
node1 -> node74;
node74 [label="FunctionCall: print"];
node74 -> node75;
node75 [label="BinaryExpression"];
node75 -> node76;
node76 [label="BinaryExpression"];
node76 -> node77;
node77 [label="BinaryExpression"];
node77 -> node78;
node78 [label="Constant: \"The binary equivalent of \""];
node77 -> node79;
node79 [label="+"];
node77 -> node80;
node80 [label="FunctionCall: convert_string"];
node80 -> node81;
node81 [label="Variable: decimal_number"];
node76 -> node82;
node82 [label="+"];
node76 -> node83;
node83 [label="Constant: \" is: \""];
node75 -> node84;
node84 [label="+"];
node75 -> node85;
node85 [label="FunctionCall: decimal_to_binary"];
node85 -> node86;
node86 [label="Variable: decimal_number"];
}
