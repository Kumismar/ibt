% Tento soubor nahraďte vlastním souborem s přílohami (nadpisy níže jsou pouze pro příklad)

% Pro kompilaci po částech (viz projekt.tex), nutno odkomentovat a upravit
%\documentclass[../projekt.tex]{subfiles}
%\begin{document}

% Umístění obsahu paměťového média do příloh je vhodné konzultovat s vedoucím
%\chapter{Obsah přiloženého paměťového média}

\chapter{Příklady zdrojových kódů v~jazyce Koubp a~jejich AST reprezentace}

\subsection*{Příkaz if-elseif}
\begin{lstlisting}[language=Koubp]
    if (vyraz)
        prikaz();
    elseif(vyraz)
        prikaz();
\end{lstlisting}
\begin{figure}[ht]
    \centering
    \includegraphics[width=\textwidth]{obrazky-figures/ast_if_elseif.pdf}
    \caption{Programem vygenerovaný AST pro konstrukci \texttt{if-elseif}}
    \label{fig_ast_elseif}
\end{figure}

\subsection*{Příkaz if-else if}
\begin{lstlisting}[language=Koubp]
    if (vyraz)
        prikaz();
    else if(vyraz)
        prikaz(do_something(bar) + var);
\end{lstlisting}
\begin{figure}[ht]
    \centering
    \includegraphics[width=\textwidth]{obrazky-figures/ast_if_else_if.pdf}
    \caption{Vygenerovaný AST pro jednoduchou konstrukci \texttt{if-else if}.}
    \label{fig_ast_else_if}
\end{figure}

\newpage

\subsection*{Cyklus While}

\begin{lstlisting}[language=Koubp]
	while (i > 0) {
		do_something(foo(bar(1 + (2 * 3))) + baz() / 3);
	}
\end{lstlisting}

\begin{figure}[h!]
	\centering
	\includegraphics[width=\textwidth]{obrazky-figures/ast_while_loop.pdf}
	\caption{Příklad jednoduchého cyklu \texttt{while}, vygenerovaného programem, s~jedním voláním funkce uvnitř těla.}
	\label{fig_ast_while_loop}
\end{figure}

\newpage

\subsection*{Deklarace a přiřazení}

\begin{lstlisting}[language=Koubp]
    float input = do_something(var, f(1) + 2) + 20.0*d;
\end{lstlisting}
\begin{figure}[h]
    \centering
    \includegraphics[width=\textwidth]{obrazky-figures/tree_deklarace.pdf}
    \caption{Programem vygenerovaný AST pro deklaraci s~přiřazením.}
    \label{fig_ast_declaration}
\end{figure}


\chapter{Vztahy tříd provádějící syn\-tak\-tic\-kou analýzu}\label{kap_priloha_b}

Třídní diagram na obrázku \ref{fig_parsers_class_diagram} obsahuje pouze třídy, které se provádějí algoritmus syntaktické analýzy, respektive simulaci zásobníkového automatu.
Další pomocné třídy, jako například LL nebo precedenční tabulka, nejsou pro přehlednost v~diagramu zobrazeny.
\begin{figure}[ht]
    \centering
    \includegraphics[width=0.92\textwidth]{obrazky-figures/parsers_class_diagram.eps}
    \caption{Vztahy mezi třídami, které spolupracují na syntaktické analýze.}
    \label{fig_parsers_class_diagram}
\end{figure}

\chapter{Třídní hierarchie uzlů AST} \label{kap_priloha_c}
Pro větší přehlednost je hierarchie rozdělena do tří obrázků.
Tyto diagramy jsou úmyslně zjednodušené, zaměřují se pouze na vzájemnou dědičnost mezi třídami; opomíjí kompoziční vztahy a~další detaily, jako například jiné a~ne tak podstatné třídy, použité enumerátory a~podobně.
Jejich hlavním účelem je ilustrovat strukturu hierarchie uzlů AST.

První obrázek (Obrázek \ref{fig_hierarchie_astnode}) ukazuje třídu \texttt{ASTNode} a~třídy, které z~ní přímo dědí.
\begin{figure}[h]
	\centering
	\includegraphics[width=\textwidth]{obrazky-figures/ast_node_hierarchy.eps}
	\caption{Diagram tříd zobrazující třídu \texttt{ASTNode} a~její přímé potomky.}
	\label{fig_hierarchie_astnode}
\end{figure}
\newpage

Druhý obrázek (Obrázek \ref{fig_hierarchie_expression}) prezentuje hierarchii tříd, které reprezentují různé typy výrazů v~AST. 
\begin{figure}[h]
	\centering
	\includegraphics[width=\textwidth]{obrazky-figures/expression_hierarchy.eps}
	\caption{Třídní hierarchie AST pro všechny typy výrazů.}
	\label{fig_hierarchie_expression}
\end{figure}
\newpage

Třetí diagram na Obrázku \ref{fig_hierarchie_statement} zobrazuje různé druhy příkazů ve zdrojovém kódu pomocí tříd.
Podobně jako u~předchozích diagramů, tento diagram se soustředí na hierarchii těchto tříd a~vynechává zbytečné detaily.
\begin{figure}[h!]
		\centering
		\includegraphics[height=0.88\textheight]{obrazky-figures/statement_hierarchy.eps}
		\caption{Třídní diagram s~třídami uzlů AST, které reprezentují příkazy.}
		\label{fig_hierarchie_statement}
\end{figure}

\newpage

Poslední třída je \texttt{FunctionDefinition}.
Ta také dědí od třídy \texttt{Statement}, ale do předchozího diagramu nebyla zařazena ze dvou důvodů:
\begin{enumerate}
	\item sémanticky se do ostatních příkazů nehodí,
	\item diagram na Obrázku \ref{fig_hierarchie_statement} by byl takřka nečitelný kvůli velkému množství tříd, což by způsobilo oddálení diagramu.
\end{enumerate}
Proto je tato třída zobrazena v~samostatném diagramu na Obrázku \ref{fig_hierarchie_funcdef}.
K~této třídě byla přidána i~třída \texttt{Parameter}, která je nedílnou součástí definice funkce, a~agregační vztah mezi nimi.

\begin{figure}[h!]
	\centering
	\includegraphics[width=\textwidth]{obrazky-figures/funcdef_hierarchy.eps}
	\caption{Diagram tříd zobrazující zařazení třídy \texttt{FunctionDefinition} do hierarchie uzlů AST.}
	\label{fig_hierarchie_funcdef}	
\end{figure}
%\chapter{Plakát}



% Pro kompilaci po částech (viz projekt.tex) nutno odkomentovat
%\end{document}
