%token if tLPar tRPar while for return tSemi elseif else function funcName tColon tLCurl tRCurl variable tComma int float string bool /* + - * / . && || == != < > <= >= ! */ tAssign constant funcName expression
%%
program : statement statementList 
        | functionDef statementList;

statementList : statement statementList 
              | functionDef statementList 
              |;

statement : if tLPar expression tRPar codeBlock if2
          | while tLPar expression tRPar codeBlock
          | for tLPar declOrExpr tSemi expression tSemi expression tRPar codeBlock
          | declOrExpr tSemi
          | return returnExp tSemi
          | tSemi;

if2 : elseif tLPar expression tRPar codeBlock if2
    | else codeBlock
    |;

declOrExpr : declaration
           | expression;

returnExp : expression
          |;
        
declaration : type variable tAssign expression;

functionDef : function funcName tLPar params tRPar tColon voluntaryType tLCurl statements tRCurl;

params : type variable params2
       |;

params2 : tComma type variable params2
        |;
/*
expression : expression + - * / . && || == != > < >= <= = expression
           | ! - expression
           | variable
           | constant
           | funcName tLPar args tRPar
           | tLPar expression tRPar;
*/

args : expression args2
     |;

args2 : tComma expression args2
      |;

codeBlock : tLCurl statements tRCurl 
          /* | statement */;

statements : statement statements
           |;

voluntaryType : type 
              |;

type : int | float | string | bool;

