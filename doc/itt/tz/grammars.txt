======= Gramatika 1 =======

<program>_1 -> <statement>_2 <statementList>_1 
            -> <functionDef>_3 <statementList>_1

<statementList>_1 -> <statement>_2 <statementList>_1 
              -> <functionDef>_3 <statementList>_1 
              -> eps


======= Gramatika 2 =======

<statement>_2 -> if ( <expression>_4 ) <codeBlock>_5 <if2>_2
              -> while ( <expression>_4 ) <codeBlock>_5
              -> for ( <declOrExpr>_2 ; <expression>_4 ; <expression>_4 ) <codeBlock>_5
              -> <declOrExpr>_2 ;
              -> <codeBlock>_5
              -> return <returnExp>_2 ;
              -> ;

<if2>_2 -> elseif ( <expression>_4 ) <codeBlock>_5 <if2>_2
      -> else <codeBlock>_5
      -> eps

<declOrExpr>_2 -> <type>_6 variable = <expression>_4
             -> <expression>_4

<returnExp>_2 -> <expression>_4
            -> eps
            

======= Gramatika 3 =======

<functionDef>_3 -> function funcName ( <params>_3 ) : <voluntaryType>_6 { <statements>_5 };

<params>_3 -> <type>_6 variable <params2>_3 
           -> eps

<params2>_3 -> , <type>_6 variable <params2>_3 
            -> eps


======== Gramatika 4 =======

<expression>_4 -> <expression>_4 (+ - * / . && || == != > < >= <= =) <expression>_4
             -> (! -) <expression>_4
             -> variable
             -> constant
             -> funcName ( <args>_4 )
             -> ( <expression>_4 )

<args>_4 -> <expression>_4 <args2>_4
         -> eps

<args2>_4 -> , <expression>_4 <args2>_4
          -> eps


======= Gramatika 5 =======

<codeBlock>_5 -> { <statements>_2 } 
              -> <statement>_2;

<statements>_2 -> <statement>_2 <statements>_2
               -> eps;


======= Gramatika 6 =======

<voluntaryType>_6 -> <type>_6 
                  -> eps

<type>_6 -> int | float | string | bool;